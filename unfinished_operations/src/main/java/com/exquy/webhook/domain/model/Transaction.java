package com.exquy.webhook.domain.model;

import com.company.transactionrecovery.domain.enums.TransactionStatus;
import com.vladmihalcea.hibernate.type.json.JsonBinaryType;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;
import org.hibernate.annotations.TypeDefs;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.UUID;

/**
 * Entity representing a transaction in the system.
 * This is the core domain object that tracks the state of each transaction
 * throughout its lifecycle.
 */
@Entity
@Table(name = "transactions")
@TypeDefs({
    @TypeDef(name = "jsonb", typeClass = JsonBinaryType.class)
})
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@EntityListeners(AuditingEntityListener.class)
public class Transaction {

    /**
     * Unique identifier for the transaction.
     * Generated by the originator system to ensure idempotency.
     */
    @Id
    @Column(nullable = false, updatable = false)
    private UUID id;

    /**
     * Identifier of the system that originated this transaction.
     */
    @Column(name = "origin_system", nullable = false)
    private String originSystem;

    /**
     * Current status of the transaction.
     */
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private TransactionStatus status;

    /**
     * The original payload/data for the transaction.
     * Stored as a JSONB object in the database.
     */
    @Type(type = "jsonb")
    @Column(columnDefinition = "jsonb")
    private Map<String, Object> payload;

    /**
     * The response received after processing the transaction.
     * Only populated for completed transactions.
     */
    @Type(type = "jsonb")
    @Column(name = "response", columnDefinition = "jsonb")
    private Map<String, Object> response;

    /**
     * Details about any errors that occurred during processing.
     * Only populated for failed transactions.
     */
    @Type(type = "jsonb")
    @Column(name = "error_details", columnDefinition = "jsonb")
    private Map<String, Object> errorDetails;

    /**
     * Number of attempts made to process this transaction.
     */
    @Column(name = "attempt_count", nullable = false)
    @Builder.Default
    private Integer attemptCount = 0;

    /**
     * Timestamp of the last attempt to process this transaction.
     */
    @Column(name = "last_attempt_at")
    private LocalDateTime lastAttemptAt;

    /**
     * Timestamp when the transaction reached a terminal state (COMPLETED/FAILED).
     */
    @Column(name = "completion_at")
    private LocalDateTime completionAt;

    /**
     * URL to receive webhook notifications for this transaction.
     */
    @Column(name = "webhook_url")
    private String webhookUrl;

    /**
     * The security token to use for signing webhook notifications.
     */
    @Column(name = "webhook_security_token")
    private String webhookSecurityToken;

    /**
     * Timestamp when the entity was created.
     * Automatically set by the JPA auditing listener.
     */
    @CreatedDate
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    /**
     * Timestamp when the entity was last updated.
     * Automatically updated by the JPA auditing listener.
     */
    @LastModifiedDate
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    /**
     * Flag indicating if this transaction has been reconciled.
     * Used during reconciliation processes after system failures.
     */
    @Column(name = "is_reconciled")
    @Builder.Default
    private Boolean isReconciled = false;

    /**
     * Internal notes about this transaction.
     * Typically used for manual resolution cases.
     */
    @Column(name = "notes", length = 1000)
    private String notes;

    /**
     * Lock version for optimistic locking.
     * Prevents concurrent updates from overwriting each other.
     */
    @Version
    private Long version;

    /**
     * Updates the transaction status and sets appropriate timestamps.
     *
     * @param newStatus The new status to set
     */
    public void updateStatus(TransactionStatus newStatus) {
        this.status = newStatus;
        
        // If moving to a terminal state, set the completion timestamp
        if (newStatus == TransactionStatus.COMPLETED || 
            newStatus == TransactionStatus.FAILED) {
            this.completionAt = LocalDateTime.now();
        }
    }

    /**
     * Increments the attempt counter and updates the last attempt timestamp.
     */
    public void recordAttempt() {
        this.attemptCount++;
        this.lastAttemptAt = LocalDateTime.now();
    }

    /**
     * Checks if this transaction has webhook notifications enabled.
     *
     * @return true if webhooks are enabled, false otherwise
     */
    public boolean hasWebhookEnabled() {
        return webhookUrl != null && !webhookUrl.isEmpty();
    }
}
